name: Frontend Chat CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:

    ci-frontend:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        
        - name: Node.js Setup
          uses: actions/setup-node@v2
          with:
            node-version: 16.x
        - name: Install NPM packages
          run: |
            cd frontend
            npm install
        - name: Build frontend
          run: |
            cd frontend
            npm run build
        - name: Setup PHP
          uses: shivammathur/setup-php@v2
          with:
            php-version: '8.0.2'
        - name: Get Composer Cache Directory 2
          id: composer-cache
          run: |
            echo "::set-output name=dir::$(composer config cache-files-dir)"
        - uses: actions/cache@v2
          id: actions-cache
          with:
            path: '${{ steps.composer-cache.outputs.dir }}'
            key: '${{ runner.os }}-composer-${{ hashFiles(''**/composer.lock'') }}'
            restore-keys: |
              ${{ runner.os }}-composer-
        - name: Cache PHP dependencies
          uses: actions/cache@v2
          id: vendor-cache
          with:
            path: vendor
            key: '${{ runner.OS }}-build-${{ hashFiles(''**/composer.lock'') }}'
        - name: Copy .env
          run: php -r "file_exists('.env') || copy('.env.ci', '.env');" # If .env exist, we use that, if otherwise, copy .env.example to .env and use that instead
        - name: Install Dependencies
          if: steps.vendor-cache.outputs.cache-hit != 'true'
          run: |
            cd frontend
            composer update
            composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist        

    ci-backend:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set up Python 3.10
          uses: actions/setup-python@v4
          with:
            # Semantic version range syntax or exact version of a Python version
            python-version: '3.10'
            # Optional - x64 or x86 architecture, defaults to x64
            architecture: 'x64'
        - name: Install dependencies
          run: |
            cd backend
            python -m pip install --upgrade pip
            pip install flake8 
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        - name: Lint with flake8
          run: |
            # stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics



    docker-login:
      runs-on: ubuntu-latest
      needs: [ci-frontend,ci-backend]
      steps:
        - run: echo "no se que"

    cd-frontend:
      runs-on: ubuntu-latest
      needs: [docker-login]
      steps:
        - uses: actions/checkout@v1
        - name: Docker login
          run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
        - name: Build frontend
          run: cd frontend && docker build -t front .
        - name: Tags
          run: |
            docker tag front ${{ secrets.DOCKER_USER }}/front-custom:${{ github.sha }}
            docker tag front ${{ secrets.DOCKER_USER }}/front-custom:latest
        - name: Push
          run: |
            docker push ${{ secrets.DOCKER_USER }}/front-custom:${{ github.sha }}
            docker push ${{ secrets.DOCKER_USER }}/front-custom:latest

    cd-backend:
      runs-on: ubuntu-latest
      needs: [docker-login]
      steps:
        - uses: actions/checkout@v1
        - name: Docker login
          run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
        - name: Build backend
          run: cd backend && docker build -t back .
        - name: Tags
          run: |
            docker tag back ${{ secrets.DOCKER_USER }}/backend-custom:${{ github.sha }}
            docker tag back ${{ secrets.DOCKER_USER }}/backend-custom:latest
        - name: Push
          run: |
            docker push ${{ secrets.DOCKER_USER }}/backend-custom:${{ github.sha }}
            docker push ${{ secrets.DOCKER_USER }}/backend-custom:latest


    deploy-frontend:
      name: Deploy new image in Server
      runs-on: ubuntu-22.04
      needs: [cd-frontend]
      environment: 
        name: prod
        url: http://deploy-ec2-prod.duckdns.org/
      if: github.ref == 'refs/heads/main'
      steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST_DNS_PRODUCTION }}
          username: ${{ secrets.USERNAME_PRODUCTION }}
          key: ${{ secrets.EC2_SSH_KEY_PRODUCTION }}
          port: 22
          script: |
            docker stop ${{ secrets.DOCKER_USER }} && docker rm ${{ secrets.DOCKER_USER }}
            docker run --name=${{ secrets.DOCKER_USER }} ${{ secrets.FRONTEND_MOUNT_CONFIG }} --network=app_network -p 80:8000 --restart=always ${{ secrets.DOCKER_USER }}/front-custom:${{ github.sha }}

    deploy-backend:
      name: Deploy Parachute Ending
      runs-on: ubuntu-22.04
      needs: [cd-backend]
      environment: 
        name: prod
      if: github.ref == 'refs/heads/main'
      steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST_DNS_PRODUCTION }}
          username: ${{ secrets.USERNAME_PRODUCTION }}
          key: ${{ secrets.EC2_SSH_KEY_PRODUCTION }}
          port: 22
          script: |
            docker stop ${{ secrets.DOCKER_USER }} && docker rm ${{ secrets.DOCKER_USER }}
            docker run --name=${{ secrets.DOCKER_USER }} ${{ secrets.BACKEND_MOUNT_CONFIG }} --network=app_network --restart=always ${{ secrets.DOCKER_USER }}/backend-custom:${{ github.sha }}