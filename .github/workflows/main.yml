name: Frontend Chat CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
    ci-frontend:
      runs-on: ubuntu-latest
      container:
        image: node
      steps:
        - uses: actions/checkout@v2
        - name: Copy .env
          run: php -r "file_exists('.env') || copy('.env.example', '.env');"
        - name: Install Dependencies
          run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        - name: Generate key
          run: php artisan key:generate
        - name: Directory Permissions
          run: chmod -R 777 storage bootstrap/cache

    ci-backend:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set up Python 3.10
          uses: actions/setup-python@v4
          with:
            # Semantic version range syntax or exact version of a Python version
            python-version: '3.10'
            # Optional - x64 or x86 architecture, defaults to x64
            architecture: 'x64'
        - name: Install dependencies
          run: |
            cd backend
            python -m pip install --upgrade pip
            pip install flake8 pytest
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        - name: Lint with flake8
          run: |
            # stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        - name: Test with pytest
          run: |
            pytest


    docker-login:
      runs-on: ubuntu-latest
      needs: [ci-frontend,ci-backend]
      steps:
        - uses: actions/checkout@v1
        - name: Docker login
          run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}


    cd-frontend:
      runs-on: ubuntu-latest
      needs: [docker-login]
      steps:
        - uses: actions/checkout@v1
        - name: Build frontend
          run: cd frontend && docker build -t front .
        - name: Tags
          run: |
            docker tag front ${{ secrets.DOCKER_USER }}/front-custom:${{ github.sha }}
            docker tag front ${{ secrets.DOCKER_USER }}/front-custom:latest
        - name: Push
          run: |
            docker push ${{ secrets.DOCKER_USER }}/front-custom:${{ github.sha }}
            docker push ${{ secrets.DOCKER_USER }}/front-custom:latest

    cd-backend:
      runs-on: ubuntu-latest
      needs: [docker-login]
      steps:
        - uses: actions/checkout@v1
        - name: Build backend
          run: cd backend && docker build -t back .
        - name: Tags
          run: |
            docker tag back ${{ secrets.DOCKER_USER }}/backend-custom:${{ github.sha }}
            docker tag back ${{ secrets.DOCKER_USER }}/backend-custom:latest
        - name: Push
          run: |
            docker push ${{ secrets.DOCKER_USER }}/backend-custom:${{ github.sha }}
            docker push ${{ secrets.DOCKER_USER }}/backend-custom:latest